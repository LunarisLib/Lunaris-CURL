name: CMake action build example test

on:
#  push:
#    branches:
#      - master
  workflow_dispatch:


jobs:
  build:
    strategy:
      matrix:
        os: [ windows-latest ] # [ windows-latest, ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install libcurl
        shell: bash
        run: |  
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then  
            sudo apt install libcurl4-openssl-dev  
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then  
            brew install curl  
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then 
            choco install -y curl
            # echo "C:\ProgramData\chocolatey\lib\curl\tools" >> $env:GITHUB_PATH
            
            ls -aRl "C:/ProgramData/chocolatey/lib/$(ls C:/ProgramData/chocolatey/lib/curl/tools/ | grep curl-)"

            echo "CURL_LIBRARY_ENV=C:/ProgramData/chocolatey/lib/$(ls C:/ProgramData/chocolatey/lib/curl/tools/ | grep curl-)/lib" >> $GITHUB_ENV
            echo "CURL_INCLUDE_ENV=C:/ProgramData/chocolatey/lib/$(ls C:/ProgramData/chocolatey/lib/curl/tools/ | grep curl-)/include" >> $GITHUB_ENV
            
            echo "C:/ProgramData/chocolatey/lib/$(ls C:/ProgramData/chocolatey/lib/curl/tools/ | grep curl-)/bin" >> $env:GITHUB_PATH
          fi

#      - name: Build
#        uses: LunarisLib/actions/CMake@master
#        with:
#          checkout: 'true'
#          project_path: ./.examples/CMake/
#          artifact_name: ${{ matrix.os }}_PROJECT
